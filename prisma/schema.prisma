// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Nft {
  id           Int @id @default(autoincrement())
  seq          Int @unique
  transport_id Int
  nft_id       Int

  character_name String @unique
  class          Int
  lvl            Int
  price          Int

  power_score  Int
  mirage_score Int
  mirax        Int

  worldName String
  tradeType Int
  reinforce Int

  copper       String
  energy       String
  darksteel    String
  speedups     String
  dragonjade   Int
  ancientcoins String
  dragonsteel  Int

  potential   Potential?
  potentialId Int?
  codex       Codex[]

  equipedSpirits       SpiritSet[]
  equipedMagicStones   MagicStoneSet[]
  equipedMysticalPiece MysticalPieceSet[]
  equipedSuccession    Succession[]

  innerForce        GenericStat[] @relation("Inner Force")
  constitutionLevel Int
  collectName       String
  collectLevel      Int

  buildings GenericStat[]   @relation("Buildings")
  stats     GenericStat[]   @relation("Stats")
  equipItem EquipItem[]
  inventory InventoryItem[]
  skills    GenericStat[]   @relation("Skills")
  spirits   Spirit[]
  HolyStuff GenericStat[]   @relation("Holy Stuff")
}

model EquipItem {
  id Int @id @default(autoincrement())

  enhance    Int
  refineStep Int    @default(0)
  grade      Int
  tier       Int
  itemName   String
  itemPath   String

  Nft   Nft? @relation(fields: [nftId], references: [id], onDelete: Cascade)
  nftId Int?
}

model InventoryItem {
  id Int @id @default(autoincrement())

  name    String
  grade   Int
  enhance Int
  tier    Int

  stack       Int
  mainType    Int
  subType     Int
  tabCategory Int
  itemPath    String

  tranceStep Int
  refineStep Int
  uniqueNo   String
  limited    String

  Nft   Nft? @relation(fields: [nftId], references: [id], onDelete: Cascade)
  nftId Int?
}

model SpiritSet {
  id Int @id @default(autoincrement())

  setIndex Int
  slot     Spirit[]

  Nft   Nft? @relation(fields: [nftId], references: [id], onDelete: Cascade)
  nftId Int?
}

model Spirit {
  id Int @id @default(autoincrement())

  transcend Int
  grade     Int
  petName   String
  iconPath  String

  Nft   Nft? @relation(fields: [nftId], references: [id], onDelete: Cascade)
  nftId Int?

  SpiritSet SpiritSet[]
}

model MagicStoneSet {
  id Int @id @default(autoincrement())

  setIndex Int
  slot     MagicStone[]

  Nft   Nft? @relation(fields: [nftId], references: [id], onDelete: Cascade)
  nftId Int?
}

model MagicStone {
  id Int @id @default(autoincrement())

  tranceStep Int
  refineStep Int
  grade      Int
  tier       Int
  itemName   String
  itemPath   String

  set MagicStoneSet[]
}

model MysticalPieceSet {
  id Int @id @default(autoincrement())

  setIndex Int
  slot     MysticalPiece[]

  Nft   Nft? @relation(fields: [nftId], references: [id], onDelete: Cascade)
  nftId Int?
}

model MysticalPiece {
  id Int @id @default(autoincrement())

  tranceStep Int
  RefineStep Int
  grade      Int
  tier       Int
  itemName   String
  itemPath   String

  set MysticalPieceSet[]
}

model Succession {
  id Int @id @default(autoincrement())

  tranceStep Int
  RefineStep Int
  enhance    Int
  grade      Int
  tier       Int
  itemName   String
  itemPath   String

  Nft   Nft? @relation(fields: [nftId], references: [id], onDelete: Cascade)
  nftId Int?
}

model GenericStat {
  id Int @id @default(autoincrement())

  name  String
  value String? 

  NftBuildings    Nft? @relation("Buildings", fields: [nftIdBuildings], references: [id], onDelete: Cascade)
  nftIdBuildings  Int?
  NftInnerForce   Nft? @relation("Inner Force", fields: [nftIdInnerForce], references: [id], onDelete: Cascade)
  nftIdInnerForce Int?
  NftSkills       Nft? @relation("Skills", fields: [nftIdSkills], references: [id], onDelete: Cascade)
  nftIdSkills     Int?
  NftStats        Nft? @relation("Stats", fields: [nftIdStats], references: [id], onDelete: Cascade)
  nftIdStats      Int?
  NftHolyStuff    Nft? @relation("Holy Stuff", fields: [nftIdHolyStuff], references: [id], onDelete: Cascade)
  nftIdHolyStuff  Int?
}

model Potential {
  id Int @id @default(autoincrement())

  total        Int
  totalMax     Int
  hunting      Int
  huntingMax   Int
  pvp          Int
  pvpMax       Int
  secondary    Int
  secondaryMax Int

  Nft   Nft? @relation(fields: [nftId], references: [id], onDelete: Cascade)
  nftId Int? @unique
}

model Codex {
  id Int @id @default(autoincrement())

  codexName  String
  totalCount Int
  completed  Int
  inprogress Int

  Nft   Nft? @relation(fields: [nftId], references: [id], onDelete: Cascade)
  nftId Int?
}
