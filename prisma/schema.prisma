// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Nft {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  seq          Int    @unique
  transport_id Int
  nft_id       Int

  character_name String @unique
  class          Int
  lvl            Int
  price          Int

  power_score  Int
  mirage_score Int
  mirax        Int

  worldName String
  tradeType Int
  reinforce Int

  assets   Assets @relation(fields: [assetsId], references: [id], onDelete: Cascade)
  assetsId String @unique @db.ObjectId

  potential   Potential? @relation(fields: [potentialId], references: [id], onDelete: Cascade)
  potentialId String?    @unique @db.ObjectId

  codex Codex[]

  equipedSpirits     SpiritSet[]
  equipedMagicStones MagicStoneSet[]

  equipedMysticalPiece MysticalPieceSet[]
  equipedSuccession    Succession[]

  innerForce        GenericStat[] @relation("Inner Force")
  constitutionLevel Int
  collectName       String
  collectLevel      Int

  buildings GenericStat[]   @relation("Buildings")
  stats     GenericStat[]   @relation("Stats")
  equipItem EquipItem[]
  inventory InventoryItem[]
  skills    GenericStat[]   @relation("Skills")
  spirits   Spirit[]
  HolyStuff GenericStat[]   @relation("Holy Stuff")
}

model Assets {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  copper       String
  energy       String
  darksteel    String
  speedups     String
  dragonjade   Int
  ancientcoins String
  dragonsteel  Int

  Nft Nft?
}

model EquipItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  enhance    Int
  refineStep Int    @default(0)
  grade      Int
  tier       Int
  itemName   String
  itemPath   String

  Nft   Nft?    @relation(fields: [nftId], references: [id], onDelete: Cascade)
  nftId String? @db.ObjectId
}

model InventoryItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  itemID  String
  itemUID String

  name    String
  grade   Int
  enhance Int
  tier    Int

  stack Int

  tabCategory Int
  itemPath    String

  tranceStep Int
  refineStep Int
  powerScore Int
  details    GenericStat[] @relation("Inventory Details")

  Nft                 Nft?               @relation(fields: [nftId], references: [id], onDelete: Cascade)
  nftId               String?            @db.ObjectId
  magicStoneSet       MagicStoneSet[]    @relation("Magic Stone Set", fields: [magicStoneSetIDs], references: [id])
  magicStoneSetIDs    String[]           @db.ObjectId
  mysticalPieceSet    MysticalPieceSet[] @relation("Mystical Piece Set", fields: [mysticalPieceSetIDs], references: [id])
  mysticalPieceSetIDs String[]           @db.ObjectId
}

model SpiritSet {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  setIndex Int
  slot     Spirit[] @relation(fields: [slotIDs], references: [id])
  slotIDs  String[] @db.ObjectId

  Nft   Nft?    @relation(fields: [nftId], references: [id], onDelete: Cascade)
  nftId String? @db.ObjectId
}

model Spirit {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  transcend Int
  grade     Int
  petName   String
  iconPath  String

  Nft   Nft?    @relation(fields: [nftId], references: [id], onDelete: Cascade)
  nftId String? @db.ObjectId

  SpiritSet    SpiritSet[] @relation(fields: [SpiritSetIDs], references: [id])
  SpiritSetIDs String[]    @db.ObjectId
}

model MagicStoneSet {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  setIndex Int
  slot     InventoryItem[] @relation("Magic Stone Set", fields: [slotIDs], references: [id])
  slotIDs  String[]        @db.ObjectId

  Nft   Nft    @relation(fields: [nftId], references: [id], onDelete: Cascade)
  nftId String @db.ObjectId
}

model MysticalPieceSet {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  setIndex Int
  slot     InventoryItem[] @relation("Mystical Piece Set", fields: [slotIDs], references: [id])
  slotIDs  String[]        @db.ObjectId

  Nft   Nft?    @relation(fields: [nftId], references: [id], onDelete: Cascade)
  nftId String? @db.ObjectId
}

model Succession {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  tranceStep Int
  RefineStep Int
  enhance    Int
  grade      Int
  tier       Int
  itemName   String
  itemPath   String

  Nft   Nft?    @relation(fields: [nftId], references: [id], onDelete: Cascade)
  nftId String? @db.ObjectId
}

model GenericStat {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name  String
  value String?

  NftBuildings    Nft?           @relation("Buildings", fields: [nftIdBuildings], references: [id], onDelete: Cascade)
  nftIdBuildings  String?        @db.ObjectId
  NftInnerForce   Nft?           @relation("Inner Force", fields: [nftIdInnerForce], references: [id], onDelete: Cascade)
  nftIdInnerForce String?        @db.ObjectId
  NftSkills       Nft?           @relation("Skills", fields: [nftIdSkills], references: [id], onDelete: Cascade)
  nftIdSkills     String?        @db.ObjectId
  NftStats        Nft?           @relation("Stats", fields: [nftIdStats], references: [id], onDelete: Cascade)
  nftIdStats      String?        @db.ObjectId
  NftHolyStuff    Nft?           @relation("Holy Stuff", fields: [nftIdHolyStuff], references: [id], onDelete: Cascade)
  nftIdHolyStuff  String?        @db.ObjectId
  inventoryItem   InventoryItem? @relation("Inventory Details", fields: [inventoryItemID], references: [id], onDelete: Cascade)
  inventoryItemID String?        @db.ObjectId
}

model Potential {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  total        Int
  totalMax     Int
  hunting      Int
  huntingMax   Int
  pvp          Int
  pvpMax       Int
  secondary    Int
  secondaryMax Int

  Nft Nft?
}

model Codex {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  codexName  String
  totalCount Int
  completed  Int
  inprogress Int

  Nft   Nft?    @relation(fields: [nftId], references: [id], onDelete: Cascade)
  nftId String? @db.ObjectId
}
